package main

import "fmt"

/**
 方法表达式
当你根据一个变量来决定调用同一个类型的哪个函数时，方法表达式就显得很有用了。
你可以根据选择来调用接收器各不相同的方法。
*/
func main() {

}

type num int

func add(a int, b int) {
	fmt.Println("a")
}

func (n *num) add(a, int, b int) {
	fmt.Println("b")
}

/*
go中的封装是t通过首字母大小写实现，包括结构体的属性的大小写，和包中函数，方法的大小写也是表示封装，大写是导出，小写是封装
go中的封装优点，
1.因为调用方不能直接修改对象的变量值，其只需要关注少量的语句并且只要弄懂少量变量的可能的值即可。
2.隐藏实现的细节，可以防止调用方依赖那些可能变化的具体实现，这样使设计包的程序员在不破坏对外的api情况下能得到更大的自由。
3.阻止了外部调用方对对象内部的值任意地进行修改。因为对象内部变量只可以被同一个包内的函数修改，所以包的作者可以让这些函数确保对象内部的一些值的不变性。
比如Counter类型允许调用方来增加counter变量的值，并且允许将这个值reset为0，但是不允许随便设置这个值
*/
